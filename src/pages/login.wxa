<script>
import { Page, toast } from "@wxa/core";
import { $wuxCountDown } from "../wux-weapp/dist/index";
import { checkPhoneNumber } from "../utils/tools";
import Network from "../utils/network";
import Session from "../utils/session";

@Page
export default class Login {
  data = {
    popupStep: 1,
    userInfo: null,
    phoneInfo: null,
    phoneNumber: null,
    verifyCode: null,
    loginButtonDisabled: true,
    verifySmsTimer: false
  };

  onLoad() {
    if (this.data.userInfo === null) {
    }
  }

  onGetUserInfo(result) {
    if (result.detail.errMsg !== "getUserInfo:ok") {
      toast("未获取到微信资料");
      return false;
    }

    this.setData({
      popupStep: 2,
      userInfo: result.detail
    });
  }

  onGetPhoneNumber(result) {
    if (result.detail.errMsg !== "getPhoneNumber:ok") {
      toast("未获取到手机号");
      return false;
    }

    this.setData({
      phoneInfo: result.detail
    });

    this._login(1);
  }

  onShowPhoneLogin(result) {
    this.setData({
      popupStep: 3
    });
  }

  onInputPhone(e) {
    if (checkPhoneNumber(e.detail.value)) {
      this.setData({
        phoneNumber: e.detail.value.trim(),
        verifySmsTimer: true,
        loginButtonDisabled: false
      });
    } else {
      this.setData({
        phoneNumber: e.detail.value.trim(),
        verifySmsTimer: false,
        loginButtonDisabled: true
      });
    }
  }

  onInputVerifyCode(e) {
    this.setData({
      verifyCode: e.detail.value.trim()
    });
  }

  async onGetVerifySms() {
    if (this.c && this.c.interval) {
      return false;
    }

    if (this.data.verifySmsTimer === true) {
      try {
        await Network.RequestApi("SEND_LOGIN_SMS", {
          phoneNumber: this.data.phoneNumber
        });
        toast("发送成功");
      } catch (e) {
        return;
        toast(e.msg);
      }

      this.c = new $wuxCountDown({
        date: +new Date() + 60000,
        onEnd() {
          this.setData({
            c: "重新获取"
          });
        },
        render(date) {
          const sec = this.leadingZeros(date.sec, 2) + " 秒 ";
          date.sec !== 0 &&
            this.setData({
              c: sec
            });
        }
      });
    } else {
      toast("请输入正确的手机号");
    }
  }

  onLogin() {
    this._login(2);
  }

  async _login(loginType) {
    if (!loginType) {
      return false;
    }

    try {
      let wxLoginRes = await this.$wxapi.login();

      let params = {};
      if (loginType == 1) {
        params = {
          loginType: loginType,
          code: wxLoginRes.code,
          userInfo: this.data.userInfo,
          phoneInfo: this.data.phoneInfo
        };
      } else if (loginType == 2) {
        let userInfoRes = await this.$wxapi.getUserInfo({
          withCredentials: true,
          lang: "zh_CN"
        });
        params = {
          loginType: loginType,
          code: wxLoginRes.code,
          userInfo: userInfoRes,
          phoneNumber: this.data.phoneNumber,
          verifyCode: this.data.verifyCode
        };
      } else {
        throw new Error("无效的登录方式");
      }

      let loginRes = await Network.RequestApi("BASE_LOGIN", params);

      //设置sessionId
      Session.login(loginRes.sessionId);
      //设置全局用户信息
      this.$store.dispatch({ type: "userInfo_update", payload: loginRes });
      
      //todo 登录成功的跳转
    } catch (e) {
      if (e.msg) {
        toast(e.msg);
      } else {
        toast("登录失败");
      }
    }
  }
}
</script>

<config>
{
  "navigationBarTitleText": "登录",
    "usingComponents": {
      "wux-skeleton": "../wux-weapp/dist/skeleton/index",
      "wux-skeleton-avatar": "../wux-weapp/dist/skeleton-avatar/index",
      "wux-skeleton-paragraph": "../wux-weapp/dist/skeleton-paragraph/index",
      "wux-row": "../wux-weapp/dist/row/index",
      "wux-col": "../wux-weapp/dist/col/index",
      "wux-button": "../wux-weapp/dist/button/index",
      "wux-selectable": "../wux-weapp/dist/selectable/index",
      "wux-checkbox": "../wux-weapp/dist/checkbox/index",
      "wux-landscape": "../wux-weapp/dist/landscape/index",
      "wux-input": "../wux-weapp/dist/input/index"
    }
}
</config>

<template>
  <view class="container blank background_main">
    <wux-skeleton active class="space_top_bottom">
      <wux-row>
        <wux-col span="3">
          <wux-skeleton-avatar size="large"/>
        </wux-col>
        <wux-col span="9">
          <wux-skeleton-paragraph rows="2"/>
        </wux-col>
      </wux-row>
    </wux-skeleton>

    <wux-skeleton active class="space_top_bottom">
      <wux-skeleton-paragraph/>
    </wux-skeleton>

    <wux-skeleton active class="space_top_bottom">
      <wux-row>
        <wux-col span="3">
          <wux-skeleton-avatar shape="rounded" size="large"/>
        </wux-col>
        <wux-col span="3">
          <wux-skeleton-avatar shape="rounded" size="large"/>
        </wux-col>
        <wux-col span="3">
          <wux-skeleton-avatar shape="rounded" size="large"/>
        </wux-col>
        <wux-col span="3">
          <wux-skeleton-avatar shape="rounded" size="large"/>
        </wux-col>
      </wux-row>
    </wux-skeleton>

    <wux-skeleton active class="space_top_bottom">
      <wux-skeleton-paragraph rows="10"/>
    </wux-skeleton>
  </view>

  <!--获取微信资料浮层-->
  <wux-landscape visible="{{ true }}" closable="{{ false }}">
    <view class="popup_box blank_bottom">
      <block wx:if="{{popupStep===1}}">
        <!--获取微信用户基本信息-->
        <view>
           <image
            src="/assets/images/login-background.png"
            mode="widthFix"
            style="border-top-left-radius:10rpx;border-top-right-radius:10rpx;"
          >
          </image>
        </view>
        <view class="blank_left_right">
          <wux-button
            block
            type="balanced"
            openType="getUserInfo"
            bind:getuserinfo="onGetUserInfo"
          >授权微信用户信息</wux-button>
        </view>
        <view class="blank_left_right">
          <wux-selectable defaultChecked="{{true}}" color="balanced">我已经认真阅读理解并同意《用户协议及隐私政策》</wux-selectable>
        </view>
      </block>
      <block wx:elif="{{popupStep===2}}">
        <!--获取微信用户手机号-->
        <view>
          <image
            src="/assets/images/login-background.png"
            mode="widthFix"
            style="border-top-left-radius:10rpx;border-top-right-radius:10rpx;"
          >
          </image>
        </view>
        <view class="blank_left_right">
          <wux-button
            block
            type="balanced"
            openType="getPhoneNumber"
            bind:getphonenumber="onGetPhoneNumber"
          >微信用户一键登录</wux-button>
        </view>
        <view class="blank_left_right">
          <wux-button clear block type="positive" bind:click="onShowPhoneLogin">手机号登录/注册</wux-button>
        </view>
      </block>
      <block wx:elif="{{popupStep===3}}">
        <view class="login_box blank_left_right">
          <view class="row">
            <view class="text-main title">手机号登录</view>
          </view>
          <view class="row border_bottom">
            <wux-input type="number" maxlength="{{11}}" bind:change="onInputPhone" placeholder="请输入手机号码"/>
          </view>
          <view class="row border_bottom">
            <wux-input type="number" maxlength="{{6}}" bind:change="onInputVerifyCode" placeholder="请输入验证码"/>
            <view bindtap="onGetVerifySms" class="count_down wux-assertive border_left">{{ c || '获取验证码' }}</view>
          </view>
          <view class="row">
            <view class="button_wrap">
              <wux-button block type="balanced" disabled="{{loginButtonDisabled}}" bind:click="onLogin">登录</wux-button>
            </view>
          </view>
        </view>
      </block>
    </view>
  </wux-landscape>
</template>

<style lang="scss">
.login_box {
  .title {
    font-size: 40rpx !important;
    text-align: center;
    width: 100%;
    margin-bottom: 40rpx;
  }
  .button_wrap {
    width: 100%;
    margin-top: 40rpx;
  }
  .row {
    display: flex;
    box-sizing: border-box;
    flex-direction: row;
    padding: 20rpx 20rpx 10rpx 20rpx;
    margin: 10rpx 0;
  }
  .count_down {
    width: 160rpx;
    text-align: right;
  }
}
</style>